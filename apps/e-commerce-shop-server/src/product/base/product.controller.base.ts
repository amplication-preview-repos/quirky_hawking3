/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductService } from "../product.service";
import { ProductCreateInput } from "./ProductCreateInput";
import { Product } from "./Product";
import { ProductFindManyArgs } from "./ProductFindManyArgs";
import { ProductWhereUniqueInput } from "./ProductWhereUniqueInput";
import { ProductUpdateInput } from "./ProductUpdateInput";
import { ReviewsFindManyArgs } from "../../reviews/base/ReviewsFindManyArgs";
import { Reviews } from "../../reviews/base/Reviews";
import { ReviewsWhereUniqueInput } from "../../reviews/base/ReviewsWhereUniqueInput";
import { WishlistItemsFindManyArgs } from "../../wishlistItems/base/WishlistItemsFindManyArgs";
import { WishlistItems } from "../../wishlistItems/base/WishlistItems";
import { WishlistItemsWhereUniqueInput } from "../../wishlistItems/base/WishlistItemsWhereUniqueInput";
import { CartItemsFindManyArgs } from "../../cartItems/base/CartItemsFindManyArgs";
import { CartItems } from "../../cartItems/base/CartItems";
import { CartItemsWhereUniqueInput } from "../../cartItems/base/CartItemsWhereUniqueInput";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrderItemWhereUniqueInput } from "../../orderItem/base/OrderItemWhereUniqueInput";

export class ProductControllerBase {
  constructor(protected readonly service: ProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Product })
  async createProduct(
    @common.Body() data: ProductCreateInput
  ): Promise<Product> {
    return await this.service.createProduct({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        productId: true,
        name: true,
        description: true,
        price: true,
        stockQuantity: true,

        category: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Product] })
  @ApiNestedQuery(ProductFindManyArgs)
  async products(@common.Req() request: Request): Promise<Product[]> {
    const args = plainToClass(ProductFindManyArgs, request.query);
    return this.service.products({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        productId: true,
        name: true,
        description: true,
        price: true,
        stockQuantity: true,

        category: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async product(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    const result = await this.service.product({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        productId: true,
        name: true,
        description: true,
        price: true,
        stockQuantity: true,

        category: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() data: ProductUpdateInput
  ): Promise<Product | null> {
    try {
      return await this.service.updateProduct({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          productId: true,
          name: true,
          description: true,
          price: true,
          stockQuantity: true,

          category: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProduct(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    try {
      return await this.service.deleteProduct({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          productId: true,
          name: true,
          description: true,
          price: true,
          stockQuantity: true,

          category: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/reviewsItems")
  @ApiNestedQuery(ReviewsFindManyArgs)
  async findReviewsItems(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Reviews[]> {
    const query = plainToClass(ReviewsFindManyArgs, request.query);
    const results = await this.service.findReviewsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        reviewId: true,
        rating: true,
        comment: true,

        product: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviewsItems")
  async connectReviewsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ReviewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviewsItems: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviewsItems")
  async updateReviewsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ReviewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviewsItems: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviewsItems")
  async disconnectReviewsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: ReviewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviewsItems: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wishlistItemsItems")
  @ApiNestedQuery(WishlistItemsFindManyArgs)
  async findWishlistItemsItems(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<WishlistItems[]> {
    const query = plainToClass(WishlistItemsFindManyArgs, request.query);
    const results = await this.service.findWishlistItemsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wishlistItemId: true,

        wishlist: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wishlistItemsItems")
  async connectWishlistItemsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: WishlistItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wishlistItemsItems: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wishlistItemsItems")
  async updateWishlistItemsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: WishlistItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wishlistItemsItems: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wishlistItemsItems")
  async disconnectWishlistItemsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: WishlistItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wishlistItemsItems: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/cartItemsItems")
  @ApiNestedQuery(CartItemsFindManyArgs)
  async findCartItemsItems(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<CartItems[]> {
    const query = plainToClass(CartItemsFindManyArgs, request.query);
    const results = await this.service.findCartItemsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cartItemId: true,
        quantity: true,

        shoppingCart: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cartItemsItems")
  async connectCartItemsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CartItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cartItemsItems: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cartItemsItems")
  async updateCartItemsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CartItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cartItemsItems: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cartItemsItems")
  async disconnectCartItemsItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CartItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cartItemsItems: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orderItems")
  @ApiNestedQuery(OrderItemFindManyArgs)
  async findOrderItems(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<OrderItem[]> {
    const query = plainToClass(OrderItemFindManyArgs, request.query);
    const results = await this.service.findOrderItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        orderItemId: true,
        quantity: true,
        priceAtPurchase: true,

        order: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderItems")
  async connectOrderItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderItems")
  async updateOrderItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderItems")
  async disconnectOrderItems(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }
}
