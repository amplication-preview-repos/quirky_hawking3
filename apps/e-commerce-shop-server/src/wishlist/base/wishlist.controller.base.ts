/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WishlistService } from "../wishlist.service";
import { WishlistCreateInput } from "./WishlistCreateInput";
import { Wishlist } from "./Wishlist";
import { WishlistFindManyArgs } from "./WishlistFindManyArgs";
import { WishlistWhereUniqueInput } from "./WishlistWhereUniqueInput";
import { WishlistUpdateInput } from "./WishlistUpdateInput";
import { WishlistItemsFindManyArgs } from "../../wishlistItems/base/WishlistItemsFindManyArgs";
import { WishlistItems } from "../../wishlistItems/base/WishlistItems";
import { WishlistItemsWhereUniqueInput } from "../../wishlistItems/base/WishlistItemsWhereUniqueInput";

export class WishlistControllerBase {
  constructor(protected readonly service: WishlistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Wishlist })
  async createWishlist(
    @common.Body() data: WishlistCreateInput
  ): Promise<Wishlist> {
    return await this.service.createWishlist({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wishlistId: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Wishlist] })
  @ApiNestedQuery(WishlistFindManyArgs)
  async wishlists(@common.Req() request: Request): Promise<Wishlist[]> {
    const args = plainToClass(WishlistFindManyArgs, request.query);
    return this.service.wishlists({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wishlistId: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Wishlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wishlist(
    @common.Param() params: WishlistWhereUniqueInput
  ): Promise<Wishlist | null> {
    const result = await this.service.wishlist({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wishlistId: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Wishlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWishlist(
    @common.Param() params: WishlistWhereUniqueInput,
    @common.Body() data: WishlistUpdateInput
  ): Promise<Wishlist | null> {
    try {
      return await this.service.updateWishlist({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          wishlistId: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Wishlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWishlist(
    @common.Param() params: WishlistWhereUniqueInput
  ): Promise<Wishlist | null> {
    try {
      return await this.service.deleteWishlist({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          wishlistId: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/wishlistItemsItems")
  @ApiNestedQuery(WishlistItemsFindManyArgs)
  async findWishlistItemsItems(
    @common.Req() request: Request,
    @common.Param() params: WishlistWhereUniqueInput
  ): Promise<WishlistItems[]> {
    const query = plainToClass(WishlistItemsFindManyArgs, request.query);
    const results = await this.service.findWishlistItemsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wishlistItemId: true,

        wishlist: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wishlistItemsItems")
  async connectWishlistItemsItems(
    @common.Param() params: WishlistWhereUniqueInput,
    @common.Body() body: WishlistItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wishlistItemsItems: {
        connect: body,
      },
    };
    await this.service.updateWishlist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wishlistItemsItems")
  async updateWishlistItemsItems(
    @common.Param() params: WishlistWhereUniqueInput,
    @common.Body() body: WishlistItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wishlistItemsItems: {
        set: body,
      },
    };
    await this.service.updateWishlist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wishlistItemsItems")
  async disconnectWishlistItemsItems(
    @common.Param() params: WishlistWhereUniqueInput,
    @common.Body() body: WishlistItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wishlistItemsItems: {
        disconnect: body,
      },
    };
    await this.service.updateWishlist({
      where: params,
      data,
      select: { id: true },
    });
  }
}
