/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WishlistItemsService } from "../wishlistItems.service";
import { WishlistItemsCreateInput } from "./WishlistItemsCreateInput";
import { WishlistItems } from "./WishlistItems";
import { WishlistItemsFindManyArgs } from "./WishlistItemsFindManyArgs";
import { WishlistItemsWhereUniqueInput } from "./WishlistItemsWhereUniqueInput";
import { WishlistItemsUpdateInput } from "./WishlistItemsUpdateInput";

export class WishlistItemsControllerBase {
  constructor(protected readonly service: WishlistItemsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WishlistItems })
  async createWishlistItems(
    @common.Body() data: WishlistItemsCreateInput
  ): Promise<WishlistItems> {
    return await this.service.createWishlistItems({
      data: {
        ...data,

        wishlist: data.wishlist
          ? {
              connect: data.wishlist,
            }
          : undefined,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wishlistItemId: true,

        wishlist: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WishlistItems] })
  @ApiNestedQuery(WishlistItemsFindManyArgs)
  async wishlistItemsItems(
    @common.Req() request: Request
  ): Promise<WishlistItems[]> {
    const args = plainToClass(WishlistItemsFindManyArgs, request.query);
    return this.service.wishlistItemsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wishlistItemId: true,

        wishlist: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WishlistItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wishlistItems(
    @common.Param() params: WishlistItemsWhereUniqueInput
  ): Promise<WishlistItems | null> {
    const result = await this.service.wishlistItems({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wishlistItemId: true,

        wishlist: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WishlistItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWishlistItems(
    @common.Param() params: WishlistItemsWhereUniqueInput,
    @common.Body() data: WishlistItemsUpdateInput
  ): Promise<WishlistItems | null> {
    try {
      return await this.service.updateWishlistItems({
        where: params,
        data: {
          ...data,

          wishlist: data.wishlist
            ? {
                connect: data.wishlist,
              }
            : undefined,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          wishlistItemId: true,

          wishlist: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WishlistItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWishlistItems(
    @common.Param() params: WishlistItemsWhereUniqueInput
  ): Promise<WishlistItems | null> {
    try {
      return await this.service.deleteWishlistItems({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          wishlistItemId: true,

          wishlist: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
