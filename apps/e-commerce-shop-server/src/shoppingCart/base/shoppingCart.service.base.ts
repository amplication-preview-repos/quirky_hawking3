/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ShoppingCart as PrismaShoppingCart,
  CartItems as PrismaCartItems,
  User as PrismaUser,
} from "@prisma/client";

export class ShoppingCartServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShoppingCartCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shoppingCart.count(args);
  }

  async shoppingCarts(
    args: Prisma.ShoppingCartFindManyArgs
  ): Promise<PrismaShoppingCart[]> {
    return this.prisma.shoppingCart.findMany(args);
  }
  async shoppingCart(
    args: Prisma.ShoppingCartFindUniqueArgs
  ): Promise<PrismaShoppingCart | null> {
    return this.prisma.shoppingCart.findUnique(args);
  }
  async createShoppingCart(
    args: Prisma.ShoppingCartCreateArgs
  ): Promise<PrismaShoppingCart> {
    return this.prisma.shoppingCart.create(args);
  }
  async updateShoppingCart(
    args: Prisma.ShoppingCartUpdateArgs
  ): Promise<PrismaShoppingCart> {
    return this.prisma.shoppingCart.update(args);
  }
  async deleteShoppingCart(
    args: Prisma.ShoppingCartDeleteArgs
  ): Promise<PrismaShoppingCart> {
    return this.prisma.shoppingCart.delete(args);
  }

  async findCartItemsItems(
    parentId: string,
    args: Prisma.CartItemsFindManyArgs
  ): Promise<PrismaCartItems[]> {
    return this.prisma.shoppingCart
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cartItemsItems(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.shoppingCart
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
